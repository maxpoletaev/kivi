// Code generated by MockGen. DO NOT EDIT.
// Source: facilities.go

// Package membership is a generated GoMock package.
package membership

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEventPub is a mock of EventPub interface.
type MockEventPub struct {
	ctrl     *gomock.Controller
	recorder *MockEventPubMockRecorder
}

// MockEventPubMockRecorder is the mock recorder for MockEventPub.
type MockEventPubMockRecorder struct {
	mock *MockEventPub
}

// NewMockEventPub creates a new mock instance.
func NewMockEventPub(ctrl *gomock.Controller) *MockEventPub {
	mock := &MockEventPub{ctrl: ctrl}
	mock.recorder = &MockEventPubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventPub) EXPECT() *MockEventPubMockRecorder {
	return m.recorder
}

// Broadcast mocks base method.
func (m *MockEventPub) Broadcast(arg0 ClusterEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Broadcast", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Broadcast indicates an expected call of Broadcast.
func (mr *MockEventPubMockRecorder) Broadcast(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockEventPub)(nil).Broadcast), arg0)
}

// RegisterReceiver mocks base method.
func (m *MockEventPub) RegisterReceiver(arg0 *Member) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterReceiver", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterReceiver indicates an expected call of RegisterReceiver.
func (mr *MockEventPubMockRecorder) RegisterReceiver(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterReceiver", reflect.TypeOf((*MockEventPub)(nil).RegisterReceiver), arg0)
}

// UnregisterReceiver mocks base method.
func (m *MockEventPub) UnregisterReceiver(arg0 *Member) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnregisterReceiver", arg0)
}

// UnregisterReceiver indicates an expected call of UnregisterReceiver.
func (mr *MockEventPubMockRecorder) UnregisterReceiver(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterReceiver", reflect.TypeOf((*MockEventPub)(nil).UnregisterReceiver), arg0)
}
