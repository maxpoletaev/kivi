// Code generated by MockGen. DO NOT EDIT.
// Source: conn.go

// Package nodeclient is a generated GoMock package.
package nodeclient

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	proto "github.com/maxpoletaev/kiwi/faildetector/proto"
	proto0 "github.com/maxpoletaev/kiwi/membership/proto"
	proto1 "github.com/maxpoletaev/kiwi/storage/proto"
)

// MockConn is a mock of Conn interface.
type MockConn struct {
	ctrl     *gomock.Controller
	recorder *MockConnMockRecorder
}

// MockConnMockRecorder is the mock recorder for MockConn.
type MockConnMockRecorder struct {
	mock *MockConn
}

// NewMockConn creates a new mock instance.
func NewMockConn(ctrl *gomock.Controller) *MockConn {
	mock := &MockConn{ctrl: ctrl}
	mock.recorder = &MockConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConn) EXPECT() *MockConnMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockConn) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConnMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConn)(nil).Close))
}

// Get mocks base method.
func (m *MockConn) Get(ctx context.Context, req *proto1.GetRequest) (*proto1.GetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, req)
	ret0, _ := ret[0].(*proto1.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockConnMockRecorder) Get(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockConn)(nil).Get), ctx, req)
}

// IsClosed mocks base method.
func (m *MockConn) IsClosed() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsClosed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsClosed indicates an expected call of IsClosed.
func (mr *MockConnMockRecorder) IsClosed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsClosed", reflect.TypeOf((*MockConn)(nil).IsClosed))
}

// Join mocks base method.
func (m *MockConn) Join(ctx context.Context, req *proto0.JoinRequest) (*proto0.JoinResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Join", ctx, req)
	ret0, _ := ret[0].(*proto0.JoinResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Join indicates an expected call of Join.
func (mr *MockConnMockRecorder) Join(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockConn)(nil).Join), ctx, req)
}

// Members mocks base method.
func (m *MockConn) Members(ctx context.Context) (*proto0.MembersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Members", ctx)
	ret0, _ := ret[0].(*proto0.MembersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Members indicates an expected call of Members.
func (mr *MockConnMockRecorder) Members(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Members", reflect.TypeOf((*MockConn)(nil).Members), ctx)
}

// PingDirect mocks base method.
func (m *MockConn) PingDirect(ctx context.Context) (*proto.PingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingDirect", ctx)
	ret0, _ := ret[0].(*proto.PingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingDirect indicates an expected call of PingDirect.
func (mr *MockConnMockRecorder) PingDirect(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingDirect", reflect.TypeOf((*MockConn)(nil).PingDirect), ctx)
}

// PingIndirect mocks base method.
func (m *MockConn) PingIndirect(ctx context.Context, req *proto.PingRequest) (*proto.PingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingIndirect", ctx, req)
	ret0, _ := ret[0].(*proto.PingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingIndirect indicates an expected call of PingIndirect.
func (mr *MockConnMockRecorder) PingIndirect(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingIndirect", reflect.TypeOf((*MockConn)(nil).PingIndirect), ctx, req)
}

// Put mocks base method.
func (m *MockConn) Put(ctx context.Context, req *proto1.PutRequest) (*proto1.PutResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, req)
	ret0, _ := ret[0].(*proto1.PutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockConnMockRecorder) Put(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockConn)(nil).Put), ctx, req)
}
