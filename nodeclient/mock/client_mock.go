// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/maxpoletaev/kivi/nodeclient (interfaces: Conn)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	nodeclient "github.com/maxpoletaev/kivi/nodeclient"
)

// MockConn is a mock of Conn interface.
type MockConn struct {
	ctrl     *gomock.Controller
	recorder *MockConnMockRecorder
}

// MockConnMockRecorder is the mock recorder for MockConn.
type MockConnMockRecorder struct {
	mock *MockConn
}

// NewMockConn creates a new mock instance.
func NewMockConn(ctrl *gomock.Controller) *MockConn {
	mock := &MockConn{ctrl: ctrl}
	mock.recorder = &MockConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConn) EXPECT() *MockConnMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockConn) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConnMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConn)(nil).Close))
}

// IsClosed mocks base method.
func (m *MockConn) IsClosed() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsClosed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsClosed indicates an expected call of IsClosed.
func (mr *MockConnMockRecorder) IsClosed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsClosed", reflect.TypeOf((*MockConn)(nil).IsClosed))
}

// PullPushState mocks base method.
func (m *MockConn) PullPushState(arg0 context.Context, arg1 []nodeclient.NodeInfo) ([]nodeclient.NodeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullPushState", arg0, arg1)
	ret0, _ := ret[0].([]nodeclient.NodeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PullPushState indicates an expected call of PullPushState.
func (mr *MockConnMockRecorder) PullPushState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullPushState", reflect.TypeOf((*MockConn)(nil).PullPushState), arg0, arg1)
}

// RepDelete mocks base method.
func (m *MockConn) RepDelete(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepDelete", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RepDelete indicates an expected call of RepDelete.
func (mr *MockConnMockRecorder) RepDelete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepDelete", reflect.TypeOf((*MockConn)(nil).RepDelete), arg0, arg1, arg2)
}

// RepGet mocks base method.
func (m *MockConn) RepGet(arg0 context.Context, arg1 string) (*nodeclient.RepGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepGet", arg0, arg1)
	ret0, _ := ret[0].(*nodeclient.RepGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RepGet indicates an expected call of RepGet.
func (mr *MockConnMockRecorder) RepGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepGet", reflect.TypeOf((*MockConn)(nil).RepGet), arg0, arg1)
}

// RepPut mocks base method.
func (m *MockConn) RepPut(arg0 context.Context, arg1 string, arg2 []byte, arg3 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepPut", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RepPut indicates an expected call of RepPut.
func (mr *MockConnMockRecorder) RepPut(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepPut", reflect.TypeOf((*MockConn)(nil).RepPut), arg0, arg1, arg2, arg3)
}

// StorageGet mocks base method.
func (m *MockConn) StorageGet(arg0 context.Context, arg1 string) ([]nodeclient.VersionedValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageGet", arg0, arg1)
	ret0, _ := ret[0].([]nodeclient.VersionedValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageGet indicates an expected call of StorageGet.
func (mr *MockConnMockRecorder) StorageGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageGet", reflect.TypeOf((*MockConn)(nil).StorageGet), arg0, arg1)
}

// StoragePut mocks base method.
func (m *MockConn) StoragePut(arg0 context.Context, arg1 string, arg2 nodeclient.VersionedValue, arg3 bool) (*nodeclient.PutResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoragePut", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*nodeclient.PutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoragePut indicates an expected call of StoragePut.
func (mr *MockConnMockRecorder) StoragePut(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoragePut", reflect.TypeOf((*MockConn)(nil).StoragePut), arg0, arg1, arg2, arg3)
}
