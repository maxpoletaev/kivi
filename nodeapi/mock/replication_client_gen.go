// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/maxpoletaev/kivi/replication/proto (interfaces: ReplicationClient)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	proto "github.com/maxpoletaev/kivi/replication/proto"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockReplicationClient is a mock of ReplicationClient interface.
type MockReplicationClient struct {
	ctrl     *gomock.Controller
	recorder *MockReplicationClientMockRecorder
}

// MockReplicationClientMockRecorder is the mock recorder for MockReplicationClient.
type MockReplicationClientMockRecorder struct {
	mock *MockReplicationClient
}

// NewMockReplicationClient creates a new mock instance.
func NewMockReplicationClient(ctrl *gomock.Controller) *MockReplicationClient {
	mock := &MockReplicationClient{ctrl: ctrl}
	mock.recorder = &MockReplicationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReplicationClient) EXPECT() *MockReplicationClientMockRecorder {
	return m.recorder
}

// CounterDecrement mocks base method.
func (m *MockReplicationClient) CounterDecrement(arg0 context.Context, arg1 *proto.CounterDecrementRequest, arg2 ...grpc.CallOption) (*proto.CounterDecrementResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CounterDecrement", varargs...)
	ret0, _ := ret[0].(*proto.CounterDecrementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CounterDecrement indicates an expected call of CounterDecrement.
func (mr *MockReplicationClientMockRecorder) CounterDecrement(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CounterDecrement", reflect.TypeOf((*MockReplicationClient)(nil).CounterDecrement), varargs...)
}

// CounterGet mocks base method.
func (m *MockReplicationClient) CounterGet(arg0 context.Context, arg1 *proto.CounterGetRequest, arg2 ...grpc.CallOption) (*proto.CounterGetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CounterGet", varargs...)
	ret0, _ := ret[0].(*proto.CounterGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CounterGet indicates an expected call of CounterGet.
func (mr *MockReplicationClientMockRecorder) CounterGet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CounterGet", reflect.TypeOf((*MockReplicationClient)(nil).CounterGet), varargs...)
}

// CounterIncrement mocks base method.
func (m *MockReplicationClient) CounterIncrement(arg0 context.Context, arg1 *proto.CounterIncrementRequest, arg2 ...grpc.CallOption) (*proto.CounterIncrementResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CounterIncrement", varargs...)
	ret0, _ := ret[0].(*proto.CounterIncrementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CounterIncrement indicates an expected call of CounterIncrement.
func (mr *MockReplicationClientMockRecorder) CounterIncrement(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CounterIncrement", reflect.TypeOf((*MockReplicationClient)(nil).CounterIncrement), varargs...)
}

// Delete mocks base method.
func (m *MockReplicationClient) Delete(arg0 context.Context, arg1 *proto.DeleteRequest, arg2 ...grpc.CallOption) (*proto.DeleteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*proto.DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockReplicationClientMockRecorder) Delete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockReplicationClient)(nil).Delete), varargs...)
}

// Get mocks base method.
func (m *MockReplicationClient) Get(arg0 context.Context, arg1 *proto.GetRequest, arg2 ...grpc.CallOption) (*proto.GetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*proto.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockReplicationClientMockRecorder) Get(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockReplicationClient)(nil).Get), varargs...)
}

// Put mocks base method.
func (m *MockReplicationClient) Put(arg0 context.Context, arg1 *proto.PutRequest, arg2 ...grpc.CallOption) (*proto.PutResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Put", varargs...)
	ret0, _ := ret[0].(*proto.PutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockReplicationClientMockRecorder) Put(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockReplicationClient)(nil).Put), varargs...)
}

// RegisterGet mocks base method.
func (m *MockReplicationClient) RegisterGet(arg0 context.Context, arg1 *proto.RegisterGetRequest, arg2 ...grpc.CallOption) (*proto.RegisterGetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterGet", varargs...)
	ret0, _ := ret[0].(*proto.RegisterGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterGet indicates an expected call of RegisterGet.
func (mr *MockReplicationClientMockRecorder) RegisterGet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterGet", reflect.TypeOf((*MockReplicationClient)(nil).RegisterGet), varargs...)
}

// RegisterPut mocks base method.
func (m *MockReplicationClient) RegisterPut(arg0 context.Context, arg1 *proto.RegisterPutRequest, arg2 ...grpc.CallOption) (*proto.RegisterPutResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterPut", varargs...)
	ret0, _ := ret[0].(*proto.RegisterPutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterPut indicates an expected call of RegisterPut.
func (mr *MockReplicationClientMockRecorder) RegisterPut(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterPut", reflect.TypeOf((*MockReplicationClient)(nil).RegisterPut), varargs...)
}

// SetAdd mocks base method.
func (m *MockReplicationClient) SetAdd(arg0 context.Context, arg1 *proto.SetAddRequest, arg2 ...grpc.CallOption) (*proto.SetAddResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetAdd", varargs...)
	ret0, _ := ret[0].(*proto.SetAddResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetAdd indicates an expected call of SetAdd.
func (mr *MockReplicationClientMockRecorder) SetAdd(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAdd", reflect.TypeOf((*MockReplicationClient)(nil).SetAdd), varargs...)
}

// SetContains mocks base method.
func (m *MockReplicationClient) SetContains(arg0 context.Context, arg1 *proto.SetContainsRequest, arg2 ...grpc.CallOption) (*proto.SetContainsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetContains", varargs...)
	ret0, _ := ret[0].(*proto.SetContainsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetContains indicates an expected call of SetContains.
func (mr *MockReplicationClientMockRecorder) SetContains(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContains", reflect.TypeOf((*MockReplicationClient)(nil).SetContains), varargs...)
}

// SetGetAll mocks base method.
func (m *MockReplicationClient) SetGetAll(arg0 context.Context, arg1 *proto.SetGetAllRequest, arg2 ...grpc.CallOption) (*proto.SetGetAllResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetGetAll", varargs...)
	ret0, _ := ret[0].(*proto.SetGetAllResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetGetAll indicates an expected call of SetGetAll.
func (mr *MockReplicationClientMockRecorder) SetGetAll(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGetAll", reflect.TypeOf((*MockReplicationClient)(nil).SetGetAll), varargs...)
}

// SetIntersect mocks base method.
func (m *MockReplicationClient) SetIntersect(arg0 context.Context, arg1 *proto.SetIntersectRequest, arg2 ...grpc.CallOption) (*proto.SetIntersectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetIntersect", varargs...)
	ret0, _ := ret[0].(*proto.SetIntersectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetIntersect indicates an expected call of SetIntersect.
func (mr *MockReplicationClientMockRecorder) SetIntersect(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIntersect", reflect.TypeOf((*MockReplicationClient)(nil).SetIntersect), varargs...)
}

// SetRemove mocks base method.
func (m *MockReplicationClient) SetRemove(arg0 context.Context, arg1 *proto.SetRemoveRequest, arg2 ...grpc.CallOption) (*proto.SetRemoveResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetRemove", varargs...)
	ret0, _ := ret[0].(*proto.SetRemoveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetRemove indicates an expected call of SetRemove.
func (mr *MockReplicationClientMockRecorder) SetRemove(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRemove", reflect.TypeOf((*MockReplicationClient)(nil).SetRemove), varargs...)
}
