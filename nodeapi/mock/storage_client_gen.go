// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/maxpoletaev/kivi/storage/proto (interfaces: StorageServiceClient)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	proto "github.com/maxpoletaev/kivi/storage/proto"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockStorageServiceClient is a mock of StorageServiceClient interface.
type MockStorageServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockStorageServiceClientMockRecorder
}

// MockStorageServiceClientMockRecorder is the mock recorder for MockStorageServiceClient.
type MockStorageServiceClientMockRecorder struct {
	mock *MockStorageServiceClient
}

// NewMockStorageServiceClient creates a new mock instance.
func NewMockStorageServiceClient(ctrl *gomock.Controller) *MockStorageServiceClient {
	mock := &MockStorageServiceClient{ctrl: ctrl}
	mock.recorder = &MockStorageServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageServiceClient) EXPECT() *MockStorageServiceClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockStorageServiceClient) Get(arg0 context.Context, arg1 *proto.GetRequest, arg2 ...grpc.CallOption) (*proto.GetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*proto.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStorageServiceClientMockRecorder) Get(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorageServiceClient)(nil).Get), varargs...)
}

// Put mocks base method.
func (m *MockStorageServiceClient) Put(arg0 context.Context, arg1 *proto.PutRequest, arg2 ...grpc.CallOption) (*proto.PutResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Put", varargs...)
	ret0, _ := ret[0].(*proto.PutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockStorageServiceClientMockRecorder) Put(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockStorageServiceClient)(nil).Put), varargs...)
}

// Scan mocks base method.
func (m *MockStorageServiceClient) Scan(arg0 context.Context, arg1 *proto.ScanRequest, arg2 ...grpc.CallOption) (proto.StorageService_ScanClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(proto.StorageService_ScanClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Scan indicates an expected call of Scan.
func (mr *MockStorageServiceClientMockRecorder) Scan(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockStorageServiceClient)(nil).Scan), varargs...)
}
