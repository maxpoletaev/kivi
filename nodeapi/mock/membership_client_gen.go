// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/maxpoletaev/kivi/membership/proto (interfaces: MembershipClient)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	proto "github.com/maxpoletaev/kivi/membership/proto"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockMembershipClient is a mock of MembershipClient interface.
type MockMembershipClient struct {
	ctrl     *gomock.Controller
	recorder *MockMembershipClientMockRecorder
}

// MockMembershipClientMockRecorder is the mock recorder for MockMembershipClient.
type MockMembershipClientMockRecorder struct {
	mock *MockMembershipClient
}

// NewMockMembershipClient creates a new mock instance.
func NewMockMembershipClient(ctrl *gomock.Controller) *MockMembershipClient {
	mock := &MockMembershipClient{ctrl: ctrl}
	mock.recorder = &MockMembershipClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMembershipClient) EXPECT() *MockMembershipClientMockRecorder {
	return m.recorder
}

// ListNodes mocks base method.
func (m *MockMembershipClient) ListNodes(arg0 context.Context, arg1 *proto.ListNodesRequest, arg2 ...grpc.CallOption) (*proto.ListNodesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNodes", varargs...)
	ret0, _ := ret[0].(*proto.ListNodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNodes indicates an expected call of ListNodes.
func (mr *MockMembershipClientMockRecorder) ListNodes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodes", reflect.TypeOf((*MockMembershipClient)(nil).ListNodes), varargs...)
}

// Ping mocks base method.
func (m *MockMembershipClient) Ping(arg0 context.Context, arg1 *proto.PingRequest, arg2 ...grpc.CallOption) (*proto.PingResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ping", varargs...)
	ret0, _ := ret[0].(*proto.PingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockMembershipClientMockRecorder) Ping(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockMembershipClient)(nil).Ping), varargs...)
}

// PingIndirect mocks base method.
func (m *MockMembershipClient) PingIndirect(arg0 context.Context, arg1 *proto.PingIndirectRequest, arg2 ...grpc.CallOption) (*proto.PingIndirectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PingIndirect", varargs...)
	ret0, _ := ret[0].(*proto.PingIndirectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingIndirect indicates an expected call of PingIndirect.
func (mr *MockMembershipClientMockRecorder) PingIndirect(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingIndirect", reflect.TypeOf((*MockMembershipClient)(nil).PingIndirect), varargs...)
}

// PullPushState mocks base method.
func (m *MockMembershipClient) PullPushState(arg0 context.Context, arg1 *proto.PullPushStateRequest, arg2 ...grpc.CallOption) (*proto.PullPushStateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PullPushState", varargs...)
	ret0, _ := ret[0].(*proto.PullPushStateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PullPushState indicates an expected call of PullPushState.
func (mr *MockMembershipClientMockRecorder) PullPushState(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullPushState", reflect.TypeOf((*MockMembershipClient)(nil).PullPushState), varargs...)
}
