// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/maxpoletaev/kivi/noderpc (interfaces: Client)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	nodeapi "github.com/maxpoletaev/kivi/noderpc"
	gomock "go.uber.org/mock/gomock"
)

// MockConn is a mock of Client interface.
type MockConn struct {
	ctrl     *gomock.Controller
	recorder *MockConnMockRecorder
}

// MockConnMockRecorder is the mock recorder for MockConn.
type MockConnMockRecorder struct {
	mock *MockConn
}

// NewMockConn creates a new mock instance.
func NewMockConn(ctrl *gomock.Controller) *MockConn {
	mock := &MockConn{ctrl: ctrl}
	mock.recorder = &MockConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConn) EXPECT() *MockConnMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockConn) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConnMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConn)(nil).Close))
}

// DeleteKey mocks base method.
func (m *MockConn) DeleteKey(arg0 context.Context, arg1, arg2 string) (*nodeapi.DeleteKeyResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKey", arg0, arg1, arg2)
	ret0, _ := ret[0].(*nodeapi.DeleteKeyResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKey indicates an expected call of DeleteKey.
func (mr *MockConnMockRecorder) DeleteKey(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKey", reflect.TypeOf((*MockConn)(nil).DeleteKey), arg0, arg1, arg2)
}

// GetKey mocks base method.
func (m *MockConn) GetKey(arg0 context.Context, arg1 string) (*nodeapi.GetKeyResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKey", arg0, arg1)
	ret0, _ := ret[0].(*nodeapi.GetKeyResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKey indicates an expected call of GetKey.
func (mr *MockConnMockRecorder) GetKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKey", reflect.TypeOf((*MockConn)(nil).GetKey), arg0, arg1)
}

// IsClosed mocks base method.
func (m *MockConn) IsClosed() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsClosed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsClosed indicates an expected call of IsClosed.
func (mr *MockConnMockRecorder) IsClosed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsClosed", reflect.TypeOf((*MockConn)(nil).IsClosed))
}

// Ping mocks base method.
func (m *MockConn) Ping(arg0 context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockConnMockRecorder) Ping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockConn)(nil).Ping), arg0)
}

// PingIndirect mocks base method.
func (m *MockConn) PingIndirect(arg0 context.Context, arg1 nodeapi.NodeID, arg2 time.Duration) (nodeapi.PingResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingIndirect", arg0, arg1, arg2)
	ret0, _ := ret[0].(nodeapi.PingResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingIndirect indicates an expected call of PingIndirect.
func (mr *MockConnMockRecorder) PingIndirect(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingIndirect", reflect.TypeOf((*MockConn)(nil).PingIndirect), arg0, arg1, arg2)
}

// PullPushState mocks base method.
func (m *MockConn) PullPushState(arg0 context.Context, arg1 []nodeapi.NodeInfo) ([]nodeapi.NodeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullPushState", arg0, arg1)
	ret0, _ := ret[0].([]nodeapi.NodeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PullPushState indicates an expected call of PullPushState.
func (mr *MockConnMockRecorder) PullPushState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullPushState", reflect.TypeOf((*MockConn)(nil).PullPushState), arg0, arg1)
}

// PutKey mocks base method.
func (m *MockConn) PutKey(arg0 context.Context, arg1 string, arg2 []byte, arg3 string) (*nodeapi.PutKeyResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutKey", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*nodeapi.PutKeyResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutKey indicates an expected call of PutKey.
func (mr *MockConnMockRecorder) PutKey(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutKey", reflect.TypeOf((*MockConn)(nil).PutKey), arg0, arg1, arg2, arg3)
}

// StorageGet mocks base method.
func (m *MockConn) StorageGet(arg0 context.Context, arg1 string) (*nodeapi.StorageGetResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageGet", arg0, arg1)
	ret0, _ := ret[0].(*nodeapi.StorageGetResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageGet indicates an expected call of StorageGet.
func (mr *MockConnMockRecorder) StorageGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageGet", reflect.TypeOf((*MockConn)(nil).StorageGet), arg0, arg1)
}

// StoragePut mocks base method.
func (m *MockConn) StoragePut(arg0 context.Context, arg1 string, arg2 nodeapi.VersionedValue, arg3 bool) (*nodeapi.StoragePutResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoragePut", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*nodeapi.StoragePutResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoragePut indicates an expected call of StoragePut.
func (mr *MockConnMockRecorder) StoragePut(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoragePut", reflect.TypeOf((*MockConn)(nil).StoragePut), arg0, arg1, arg2, arg3)
}
