// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	proto "github.com/maxpoletaev/kv/faildetector/proto"
	proto0 "github.com/maxpoletaev/kv/membership/proto"
	proto1 "github.com/maxpoletaev/kv/storage/proto"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// Get mocks base method.
func (m *MockClient) Get(ctx context.Context, req *proto1.GetRequest) (*proto1.GetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, req)
	ret0, _ := ret[0].(*proto1.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockClientMockRecorder) Get(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClient)(nil).Get), ctx, req)
}

// IsClosed mocks base method.
func (m *MockClient) IsClosed() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsClosed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsClosed indicates an expected call of IsClosed.
func (mr *MockClientMockRecorder) IsClosed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsClosed", reflect.TypeOf((*MockClient)(nil).IsClosed))
}

// Join mocks base method.
func (m *MockClient) Join(ctx context.Context, req *proto0.JoinRequest) (*proto0.JoinResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Join", ctx, req)
	ret0, _ := ret[0].(*proto0.JoinResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Join indicates an expected call of Join.
func (mr *MockClientMockRecorder) Join(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockClient)(nil).Join), ctx, req)
}

// Members mocks base method.
func (m *MockClient) Members(ctx context.Context) (*proto0.MembersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Members", ctx)
	ret0, _ := ret[0].(*proto0.MembersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Members indicates an expected call of Members.
func (mr *MockClientMockRecorder) Members(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Members", reflect.TypeOf((*MockClient)(nil).Members), ctx)
}

// PingDirect mocks base method.
func (m *MockClient) PingDirect(ctx context.Context) (*proto.PingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingDirect", ctx)
	ret0, _ := ret[0].(*proto.PingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingDirect indicates an expected call of PingDirect.
func (mr *MockClientMockRecorder) PingDirect(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingDirect", reflect.TypeOf((*MockClient)(nil).PingDirect), ctx)
}

// PingIndirect mocks base method.
func (m *MockClient) PingIndirect(ctx context.Context, req *proto.PingRequest) (*proto.PingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingIndirect", ctx, req)
	ret0, _ := ret[0].(*proto.PingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingIndirect indicates an expected call of PingIndirect.
func (mr *MockClientMockRecorder) PingIndirect(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingIndirect", reflect.TypeOf((*MockClient)(nil).PingIndirect), ctx, req)
}

// Put mocks base method.
func (m *MockClient) Put(ctx context.Context, req *proto1.PutRequest) (*proto1.PutResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, req)
	ret0, _ := ret[0].(*proto1.PutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockClientMockRecorder) Put(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockClient)(nil).Put), ctx, req)
}
