// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/maxpoletaev/kv/replication/proto (interfaces: CoordinatorServiceClient,CoordinatorServiceServer)

// Package proto is a generated GoMock package.
package proto

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockCoordinatorServiceClient is a mock of CoordinatorServiceClient interface.
type MockCoordinatorServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCoordinatorServiceClientMockRecorder
}

// MockCoordinatorServiceClientMockRecorder is the mock recorder for MockCoordinatorServiceClient.
type MockCoordinatorServiceClientMockRecorder struct {
	mock *MockCoordinatorServiceClient
}

// NewMockCoordinatorServiceClient creates a new mock instance.
func NewMockCoordinatorServiceClient(ctrl *gomock.Controller) *MockCoordinatorServiceClient {
	mock := &MockCoordinatorServiceClient{ctrl: ctrl}
	mock.recorder = &MockCoordinatorServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoordinatorServiceClient) EXPECT() *MockCoordinatorServiceClientMockRecorder {
	return m.recorder
}

// ReplicatedGet mocks base method.
func (m *MockCoordinatorServiceClient) ReplicatedGet(arg0 context.Context, arg1 *GetRequest, arg2 ...grpc.CallOption) (*GetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReplicatedGet", varargs...)
	ret0, _ := ret[0].(*GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplicatedGet indicates an expected call of ReplicatedGet.
func (mr *MockCoordinatorServiceClientMockRecorder) ReplicatedGet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplicatedGet", reflect.TypeOf((*MockCoordinatorServiceClient)(nil).ReplicatedGet), varargs...)
}

// ReplicatedPut mocks base method.
func (m *MockCoordinatorServiceClient) ReplicatedPut(arg0 context.Context, arg1 *PutRequest, arg2 ...grpc.CallOption) (*PutResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReplicatedPut", varargs...)
	ret0, _ := ret[0].(*PutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplicatedPut indicates an expected call of ReplicatedPut.
func (mr *MockCoordinatorServiceClientMockRecorder) ReplicatedPut(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplicatedPut", reflect.TypeOf((*MockCoordinatorServiceClient)(nil).ReplicatedPut), varargs...)
}

// MockCoordinatorServiceServer is a mock of CoordinatorServiceServer interface.
type MockCoordinatorServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockCoordinatorServiceServerMockRecorder
}

// MockCoordinatorServiceServerMockRecorder is the mock recorder for MockCoordinatorServiceServer.
type MockCoordinatorServiceServerMockRecorder struct {
	mock *MockCoordinatorServiceServer
}

// NewMockCoordinatorServiceServer creates a new mock instance.
func NewMockCoordinatorServiceServer(ctrl *gomock.Controller) *MockCoordinatorServiceServer {
	mock := &MockCoordinatorServiceServer{ctrl: ctrl}
	mock.recorder = &MockCoordinatorServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoordinatorServiceServer) EXPECT() *MockCoordinatorServiceServerMockRecorder {
	return m.recorder
}

// ReplicatedGet mocks base method.
func (m *MockCoordinatorServiceServer) ReplicatedGet(arg0 context.Context, arg1 *GetRequest) (*GetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplicatedGet", arg0, arg1)
	ret0, _ := ret[0].(*GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplicatedGet indicates an expected call of ReplicatedGet.
func (mr *MockCoordinatorServiceServerMockRecorder) ReplicatedGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplicatedGet", reflect.TypeOf((*MockCoordinatorServiceServer)(nil).ReplicatedGet), arg0, arg1)
}

// ReplicatedPut mocks base method.
func (m *MockCoordinatorServiceServer) ReplicatedPut(arg0 context.Context, arg1 *PutRequest) (*PutResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplicatedPut", arg0, arg1)
	ret0, _ := ret[0].(*PutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplicatedPut indicates an expected call of ReplicatedPut.
func (mr *MockCoordinatorServiceServerMockRecorder) ReplicatedPut(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplicatedPut", reflect.TypeOf((*MockCoordinatorServiceServer)(nil).ReplicatedPut), arg0, arg1)
}

// mustEmbedUnimplementedCoordinatorServiceServer mocks base method.
func (m *MockCoordinatorServiceServer) mustEmbedUnimplementedCoordinatorServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCoordinatorServiceServer")
}

// mustEmbedUnimplementedCoordinatorServiceServer indicates an expected call of mustEmbedUnimplementedCoordinatorServiceServer.
func (mr *MockCoordinatorServiceServerMockRecorder) mustEmbedUnimplementedCoordinatorServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCoordinatorServiceServer", reflect.TypeOf((*MockCoordinatorServiceServer)(nil).mustEmbedUnimplementedCoordinatorServiceServer))
}
