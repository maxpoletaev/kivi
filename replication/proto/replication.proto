syntax = "proto3";

package replication;

option go_package = "github.com/maxpoletaev/kivi/replication/proto";

message GetRequest {
    string key = 1;
}

message GetResponse {
    repeated string values = 1;
    string version = 2;
}

message PutRequest {
    string key = 1;
    string value = 2;
    string version = 3;
}

message PutResponse {
    string version = 1;
    int32 acknowledged = 2;
}

message DeleteRequest {
    string key = 1;
    string version = 2;
}

message DeleteResponse {
    string version = 1;
    int32 acknowledged = 2;
}

/* Set */

message SetGetAllRequest {
    string key = 1;
}

message SetGetAllResponse {
    repeated string values = 1;
}

message SetAddRequest {
    string key = 1;
    repeated string items = 2;
}

message SetAddResponse {
    int32 acknowledged = 1;
}

message SetRemoveRequest {
    string key = 1;
    repeated string items = 2;
}

message SetRemoveResponse {
    int32 acknowledged = 1;
}

message SetContainsRequest {
    string key = 1;
    string item = 2;
}

message SetContainsResponse {
    bool contains = 1;
}

message SetIntersectRequest {
    repeated string keys = 1;
}

message SetIntersectResponse {
    repeated string values = 1;
}

message SetDeleteRequest {
    string key = 1;
}

message SetDeleteResponse {
    int32 acknowledged = 1;
}

/* Register */

message RegisterGetRequest {
    string key = 1;
}

message RegisterGetResponse {
    string value = 1;
    bool conflict = 2;
}

message RegisterPutRequest {
    string key = 1;
    string value = 2;
}

message RegisterPutResponse {
    int32 acknowledged = 1;
}

message RegisterDeleteRequest {
    string key = 1;
}

message RegisterDeleteResponse {
    int32 acknowledged = 1;
}

service Replication {
    rpc Get(GetRequest) returns (GetResponse);
    rpc Put(PutRequest) returns (PutResponse);
    rpc Delete(DeleteRequest) returns (DeleteResponse);

    rpc SetAdd(SetAddRequest) returns (SetAddResponse);
    rpc SetGetAll(SetGetAllRequest) returns (SetGetAllResponse);
    rpc SetRemove(SetRemoveRequest) returns (SetRemoveResponse);
    rpc SetContains(SetContainsRequest) returns (SetContainsResponse);
    rpc SetIntersect(SetIntersectRequest) returns (SetIntersectResponse);
    rpc SetClear(SetDeleteRequest) returns (SetDeleteResponse);

    rpc RegisterGet(RegisterGetRequest) returns (RegisterGetResponse);
    rpc RegisterPut(RegisterPutRequest) returns (RegisterPutResponse);
}
