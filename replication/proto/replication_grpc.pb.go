// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: replication/proto/replication.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReplicationClient is the client API for Replication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReplicationClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	SetAdd(ctx context.Context, in *SetAddRequest, opts ...grpc.CallOption) (*SetAddResponse, error)
	SetGetAll(ctx context.Context, in *SetGetAllRequest, opts ...grpc.CallOption) (*SetGetAllResponse, error)
	SetRemove(ctx context.Context, in *SetRemoveRequest, opts ...grpc.CallOption) (*SetRemoveResponse, error)
	SetContains(ctx context.Context, in *SetContainsRequest, opts ...grpc.CallOption) (*SetContainsResponse, error)
	SetIntersect(ctx context.Context, in *SetIntersectRequest, opts ...grpc.CallOption) (*SetIntersectResponse, error)
	SetDelete(ctx context.Context, in *SetDeleteRequest, opts ...grpc.CallOption) (*SetDeleteResponse, error)
	RegisterGet(ctx context.Context, in *RegisterGetRequest, opts ...grpc.CallOption) (*RegisterGetResponse, error)
	RegisterPut(ctx context.Context, in *RegisterPutRequest, opts ...grpc.CallOption) (*RegisterPutResponse, error)
	RegisterDelete(ctx context.Context, in *RegisterDeleteRequest, opts ...grpc.CallOption) (*RegisterDeleteResponse, error)
}

type replicationClient struct {
	cc grpc.ClientConnInterface
}

func NewReplicationClient(cc grpc.ClientConnInterface) ReplicationClient {
	return &replicationClient{cc}
}

func (c *replicationClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/replication.Replication/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := c.cc.Invoke(ctx, "/replication.Replication/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/replication.Replication/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationClient) SetAdd(ctx context.Context, in *SetAddRequest, opts ...grpc.CallOption) (*SetAddResponse, error) {
	out := new(SetAddResponse)
	err := c.cc.Invoke(ctx, "/replication.Replication/SetAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationClient) SetGetAll(ctx context.Context, in *SetGetAllRequest, opts ...grpc.CallOption) (*SetGetAllResponse, error) {
	out := new(SetGetAllResponse)
	err := c.cc.Invoke(ctx, "/replication.Replication/SetGetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationClient) SetRemove(ctx context.Context, in *SetRemoveRequest, opts ...grpc.CallOption) (*SetRemoveResponse, error) {
	out := new(SetRemoveResponse)
	err := c.cc.Invoke(ctx, "/replication.Replication/SetRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationClient) SetContains(ctx context.Context, in *SetContainsRequest, opts ...grpc.CallOption) (*SetContainsResponse, error) {
	out := new(SetContainsResponse)
	err := c.cc.Invoke(ctx, "/replication.Replication/SetContains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationClient) SetIntersect(ctx context.Context, in *SetIntersectRequest, opts ...grpc.CallOption) (*SetIntersectResponse, error) {
	out := new(SetIntersectResponse)
	err := c.cc.Invoke(ctx, "/replication.Replication/SetIntersect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationClient) SetDelete(ctx context.Context, in *SetDeleteRequest, opts ...grpc.CallOption) (*SetDeleteResponse, error) {
	out := new(SetDeleteResponse)
	err := c.cc.Invoke(ctx, "/replication.Replication/SetDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationClient) RegisterGet(ctx context.Context, in *RegisterGetRequest, opts ...grpc.CallOption) (*RegisterGetResponse, error) {
	out := new(RegisterGetResponse)
	err := c.cc.Invoke(ctx, "/replication.Replication/RegisterGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationClient) RegisterPut(ctx context.Context, in *RegisterPutRequest, opts ...grpc.CallOption) (*RegisterPutResponse, error) {
	out := new(RegisterPutResponse)
	err := c.cc.Invoke(ctx, "/replication.Replication/RegisterPut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationClient) RegisterDelete(ctx context.Context, in *RegisterDeleteRequest, opts ...grpc.CallOption) (*RegisterDeleteResponse, error) {
	out := new(RegisterDeleteResponse)
	err := c.cc.Invoke(ctx, "/replication.Replication/RegisterDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReplicationServer is the server API for Replication service.
// All implementations must embed UnimplementedReplicationServer
// for forward compatibility
type ReplicationServer interface {
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Put(context.Context, *PutRequest) (*PutResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	SetAdd(context.Context, *SetAddRequest) (*SetAddResponse, error)
	SetGetAll(context.Context, *SetGetAllRequest) (*SetGetAllResponse, error)
	SetRemove(context.Context, *SetRemoveRequest) (*SetRemoveResponse, error)
	SetContains(context.Context, *SetContainsRequest) (*SetContainsResponse, error)
	SetIntersect(context.Context, *SetIntersectRequest) (*SetIntersectResponse, error)
	SetDelete(context.Context, *SetDeleteRequest) (*SetDeleteResponse, error)
	RegisterGet(context.Context, *RegisterGetRequest) (*RegisterGetResponse, error)
	RegisterPut(context.Context, *RegisterPutRequest) (*RegisterPutResponse, error)
	RegisterDelete(context.Context, *RegisterDeleteRequest) (*RegisterDeleteResponse, error)
	mustEmbedUnimplementedReplicationServer()
}

// UnimplementedReplicationServer must be embedded to have forward compatible implementations.
type UnimplementedReplicationServer struct {
}

func (UnimplementedReplicationServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedReplicationServer) Put(context.Context, *PutRequest) (*PutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedReplicationServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedReplicationServer) SetAdd(context.Context, *SetAddRequest) (*SetAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAdd not implemented")
}
func (UnimplementedReplicationServer) SetGetAll(context.Context, *SetGetAllRequest) (*SetGetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGetAll not implemented")
}
func (UnimplementedReplicationServer) SetRemove(context.Context, *SetRemoveRequest) (*SetRemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRemove not implemented")
}
func (UnimplementedReplicationServer) SetContains(context.Context, *SetContainsRequest) (*SetContainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetContains not implemented")
}
func (UnimplementedReplicationServer) SetIntersect(context.Context, *SetIntersectRequest) (*SetIntersectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIntersect not implemented")
}
func (UnimplementedReplicationServer) SetDelete(context.Context, *SetDeleteRequest) (*SetDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDelete not implemented")
}
func (UnimplementedReplicationServer) RegisterGet(context.Context, *RegisterGetRequest) (*RegisterGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterGet not implemented")
}
func (UnimplementedReplicationServer) RegisterPut(context.Context, *RegisterPutRequest) (*RegisterPutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPut not implemented")
}
func (UnimplementedReplicationServer) RegisterDelete(context.Context, *RegisterDeleteRequest) (*RegisterDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDelete not implemented")
}
func (UnimplementedReplicationServer) mustEmbedUnimplementedReplicationServer() {}

// UnsafeReplicationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReplicationServer will
// result in compilation errors.
type UnsafeReplicationServer interface {
	mustEmbedUnimplementedReplicationServer()
}

func RegisterReplicationServer(s grpc.ServiceRegistrar, srv ReplicationServer) {
	s.RegisterService(&Replication_ServiceDesc, srv)
}

func _Replication_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replication.Replication/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replication_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replication.Replication/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replication_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replication.Replication/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replication_SetAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServer).SetAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replication.Replication/SetAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServer).SetAdd(ctx, req.(*SetAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replication_SetGetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServer).SetGetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replication.Replication/SetGetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServer).SetGetAll(ctx, req.(*SetGetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replication_SetRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServer).SetRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replication.Replication/SetRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServer).SetRemove(ctx, req.(*SetRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replication_SetContains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetContainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServer).SetContains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replication.Replication/SetContains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServer).SetContains(ctx, req.(*SetContainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replication_SetIntersect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetIntersectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServer).SetIntersect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replication.Replication/SetIntersect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServer).SetIntersect(ctx, req.(*SetIntersectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replication_SetDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServer).SetDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replication.Replication/SetDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServer).SetDelete(ctx, req.(*SetDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replication_RegisterGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServer).RegisterGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replication.Replication/RegisterGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServer).RegisterGet(ctx, req.(*RegisterGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replication_RegisterPut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServer).RegisterPut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replication.Replication/RegisterPut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServer).RegisterPut(ctx, req.(*RegisterPutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replication_RegisterDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServer).RegisterDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replication.Replication/RegisterDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServer).RegisterDelete(ctx, req.(*RegisterDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Replication_ServiceDesc is the grpc.ServiceDesc for Replication service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Replication_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "replication.Replication",
	HandlerType: (*ReplicationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Replication_Get_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _Replication_Put_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Replication_Delete_Handler,
		},
		{
			MethodName: "SetAdd",
			Handler:    _Replication_SetAdd_Handler,
		},
		{
			MethodName: "SetGetAll",
			Handler:    _Replication_SetGetAll_Handler,
		},
		{
			MethodName: "SetRemove",
			Handler:    _Replication_SetRemove_Handler,
		},
		{
			MethodName: "SetContains",
			Handler:    _Replication_SetContains_Handler,
		},
		{
			MethodName: "SetIntersect",
			Handler:    _Replication_SetIntersect_Handler,
		},
		{
			MethodName: "SetDelete",
			Handler:    _Replication_SetDelete_Handler,
		},
		{
			MethodName: "RegisterGet",
			Handler:    _Replication_RegisterGet_Handler,
		},
		{
			MethodName: "RegisterPut",
			Handler:    _Replication_RegisterPut_Handler,
		},
		{
			MethodName: "RegisterDelete",
			Handler:    _Replication_RegisterDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "replication/proto/replication.proto",
}
