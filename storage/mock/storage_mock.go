// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	storage "github.com/maxpoletaev/kivi/storage"
)

// MockEngine is a mock of Engine interface.
type MockEngine struct {
	ctrl     *gomock.Controller
	recorder *MockEngineMockRecorder
}

// MockEngineMockRecorder is the mock recorder for MockEngine.
type MockEngineMockRecorder struct {
	mock *MockEngine
}

// NewMockEngine creates a new mock instance.
func NewMockEngine(ctrl *gomock.Controller) *MockEngine {
	mock := &MockEngine{ctrl: ctrl}
	mock.recorder = &MockEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEngine) EXPECT() *MockEngineMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockEngine) Get(key string) ([]storage.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]storage.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockEngineMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockEngine)(nil).Get), key)
}

// Put mocks base method.
func (m *MockEngine) Put(key string, value storage.Value) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockEngineMockRecorder) Put(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockEngine)(nil).Put), key, value)
}

// MockScannable is a mock of Scannable interface.
type MockScannable struct {
	ctrl     *gomock.Controller
	recorder *MockScannableMockRecorder
}

// MockScannableMockRecorder is the mock recorder for MockScannable.
type MockScannableMockRecorder struct {
	mock *MockScannable
}

// NewMockScannable creates a new mock instance.
func NewMockScannable(ctrl *gomock.Controller) *MockScannable {
	mock := &MockScannable{ctrl: ctrl}
	mock.recorder = &MockScannableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScannable) EXPECT() *MockScannableMockRecorder {
	return m.recorder
}

// Scan mocks base method.
func (m *MockScannable) Scan(key string) storage.ScanIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", key)
	ret0, _ := ret[0].(storage.ScanIterator)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockScannableMockRecorder) Scan(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockScannable)(nil).Scan), key)
}

// MockScanIterator is a mock of ScanIterator interface.
type MockScanIterator struct {
	ctrl     *gomock.Controller
	recorder *MockScanIteratorMockRecorder
}

// MockScanIteratorMockRecorder is the mock recorder for MockScanIterator.
type MockScanIteratorMockRecorder struct {
	mock *MockScanIterator
}

// NewMockScanIterator creates a new mock instance.
func NewMockScanIterator(ctrl *gomock.Controller) *MockScanIterator {
	mock := &MockScanIterator{ctrl: ctrl}
	mock.recorder = &MockScanIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScanIterator) EXPECT() *MockScanIteratorMockRecorder {
	return m.recorder
}

// Item mocks base method.
func (m *MockScanIterator) Item() (string, []storage.Value) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Item")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]storage.Value)
	return ret0, ret1
}

// Item indicates an expected call of Item.
func (mr *MockScanIteratorMockRecorder) Item() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Item", reflect.TypeOf((*MockScanIterator)(nil).Item))
}

// Next mocks base method.
func (m *MockScanIterator) Next() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(error)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockScanIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockScanIterator)(nil).Next))
}
