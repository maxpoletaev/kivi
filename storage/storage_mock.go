// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package storage

import (
	"sync"
)

// Ensure, that BackendMock does implement Backend.
// If this is not the case, regenerate this file with moq.
var _ Backend = &BackendMock{}

// BackendMock is a mock implementation of Backend.
//
// 	func TestSomethingThatUsesBackend(t *testing.T) {
//
// 		// make and configure a mocked Backend
// 		mockedBackend := &BackendMock{
// 			GetFunc: func(key string) ([]StoredValue, error) {
// 				panic("mock out the Get method")
// 			},
// 			PutFunc: func(key string, value StoredValue) error {
// 				panic("mock out the Put method")
// 			},
// 		}
//
// 		// use mockedBackend in code that requires Backend
// 		// and then make assertions.
//
// 	}
type BackendMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(key string) ([]StoredValue, error)

	// PutFunc mocks the Put method.
	PutFunc func(key string, value StoredValue) error

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Key is the key argument value.
			Key string
		}
		// Put holds details about calls to the Put method.
		Put []struct {
			// Key is the key argument value.
			Key string
			// Value is the value argument value.
			Value StoredValue
		}
	}
	lockGet sync.RWMutex
	lockPut sync.RWMutex
}

// Get calls GetFunc.
func (mock *BackendMock) Get(key string) ([]StoredValue, error) {
	callInfo := struct {
		Key string
	}{
		Key: key,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	if mock.GetFunc == nil {
		var (
			storedValuesOut []StoredValue
			errOut          error
		)
		return storedValuesOut, errOut
	}
	return mock.GetFunc(key)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedBackend.GetCalls())
func (mock *BackendMock) GetCalls() []struct {
	Key string
} {
	var calls []struct {
		Key string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Put calls PutFunc.
func (mock *BackendMock) Put(key string, value StoredValue) error {
	callInfo := struct {
		Key   string
		Value StoredValue
	}{
		Key:   key,
		Value: value,
	}
	mock.lockPut.Lock()
	mock.calls.Put = append(mock.calls.Put, callInfo)
	mock.lockPut.Unlock()
	if mock.PutFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.PutFunc(key, value)
}

// PutCalls gets all the calls that were made to Put.
// Check the length with:
//     len(mockedBackend.PutCalls())
func (mock *BackendMock) PutCalls() []struct {
	Key   string
	Value StoredValue
} {
	var calls []struct {
		Key   string
		Value StoredValue
	}
	mock.lockPut.RLock()
	calls = mock.calls.Put
	mock.lockPut.RUnlock()
	return calls
}
