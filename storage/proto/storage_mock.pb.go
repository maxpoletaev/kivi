// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/maxpoletaev/kv/storage/proto (interfaces: StorageServiceClient,StorageServiceServer)

// Package proto is a generated GoMock package.
package proto

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockStorageServiceClient is a mock of StorageServiceClient interface.
type MockStorageServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockStorageServiceClientMockRecorder
}

// MockStorageServiceClientMockRecorder is the mock recorder for MockStorageServiceClient.
type MockStorageServiceClientMockRecorder struct {
	mock *MockStorageServiceClient
}

// NewMockStorageServiceClient creates a new mock instance.
func NewMockStorageServiceClient(ctrl *gomock.Controller) *MockStorageServiceClient {
	mock := &MockStorageServiceClient{ctrl: ctrl}
	mock.recorder = &MockStorageServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageServiceClient) EXPECT() *MockStorageServiceClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockStorageServiceClient) Get(arg0 context.Context, arg1 *GetRequest, arg2 ...grpc.CallOption) (*GetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStorageServiceClientMockRecorder) Get(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorageServiceClient)(nil).Get), varargs...)
}

// Put mocks base method.
func (m *MockStorageServiceClient) Put(arg0 context.Context, arg1 *PutRequest, arg2 ...grpc.CallOption) (*PutResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Put", varargs...)
	ret0, _ := ret[0].(*PutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockStorageServiceClientMockRecorder) Put(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockStorageServiceClient)(nil).Put), varargs...)
}

// MockStorageServiceServer is a mock of StorageServiceServer interface.
type MockStorageServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockStorageServiceServerMockRecorder
}

// MockStorageServiceServerMockRecorder is the mock recorder for MockStorageServiceServer.
type MockStorageServiceServerMockRecorder struct {
	mock *MockStorageServiceServer
}

// NewMockStorageServiceServer creates a new mock instance.
func NewMockStorageServiceServer(ctrl *gomock.Controller) *MockStorageServiceServer {
	mock := &MockStorageServiceServer{ctrl: ctrl}
	mock.recorder = &MockStorageServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageServiceServer) EXPECT() *MockStorageServiceServerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockStorageServiceServer) Get(arg0 context.Context, arg1 *GetRequest) (*GetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStorageServiceServerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorageServiceServer)(nil).Get), arg0, arg1)
}

// Put mocks base method.
func (m *MockStorageServiceServer) Put(arg0 context.Context, arg1 *PutRequest) (*PutResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", arg0, arg1)
	ret0, _ := ret[0].(*PutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockStorageServiceServerMockRecorder) Put(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockStorageServiceServer)(nil).Put), arg0, arg1)
}

// mustEmbedUnimplementedStorageServiceServer mocks base method.
func (m *MockStorageServiceServer) mustEmbedUnimplementedStorageServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedStorageServiceServer")
}

// mustEmbedUnimplementedStorageServiceServer indicates an expected call of mustEmbedUnimplementedStorageServiceServer.
func (mr *MockStorageServiceServerMockRecorder) mustEmbedUnimplementedStorageServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedStorageServiceServer", reflect.TypeOf((*MockStorageServiceServer)(nil).mustEmbedUnimplementedStorageServiceServer))
}
