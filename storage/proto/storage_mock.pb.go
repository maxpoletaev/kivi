// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	sync "sync"
)

// Ensure, that StorageServiceClientMock does implement StorageServiceClient.
// If this is not the case, regenerate this file with moq.
var _ StorageServiceClient = &StorageServiceClientMock{}

// StorageServiceClientMock is a mock implementation of StorageServiceClient.
//
// 	func TestSomethingThatUsesStorageServiceClient(t *testing.T) {
//
// 		// make and configure a mocked StorageServiceClient
// 		mockedStorageServiceClient := &StorageServiceClientMock{
// 			GetFunc: func(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
// 				panic("mock out the Get method")
// 			},
// 			PutFunc: func(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
// 				panic("mock out the Put method")
// 			},
// 		}
//
// 		// use mockedStorageServiceClient in code that requires StorageServiceClient
// 		// and then make assertions.
//
// 	}
type StorageServiceClientMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)

	// PutFunc mocks the Put method.
	PutFunc func(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *GetRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// Put holds details about calls to the Put method.
		Put []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *PutRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
	}
	lockGet sync.RWMutex
	lockPut sync.RWMutex
}

// Get calls GetFunc.
func (mock *StorageServiceClientMock) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	callInfo := struct {
		Ctx  context.Context
		In   *GetRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	if mock.GetFunc == nil {
		var (
			getResponseOut *GetResponse
			errOut         error
		)
		return getResponseOut, errOut
	}
	return mock.GetFunc(ctx, in, opts...)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedStorageServiceClient.GetCalls())
func (mock *StorageServiceClientMock) GetCalls() []struct {
	Ctx  context.Context
	In   *GetRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *GetRequest
		Opts []grpc.CallOption
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Put calls PutFunc.
func (mock *StorageServiceClientMock) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	callInfo := struct {
		Ctx  context.Context
		In   *PutRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockPut.Lock()
	mock.calls.Put = append(mock.calls.Put, callInfo)
	mock.lockPut.Unlock()
	if mock.PutFunc == nil {
		var (
			putResponseOut *PutResponse
			errOut         error
		)
		return putResponseOut, errOut
	}
	return mock.PutFunc(ctx, in, opts...)
}

// PutCalls gets all the calls that were made to Put.
// Check the length with:
//     len(mockedStorageServiceClient.PutCalls())
func (mock *StorageServiceClientMock) PutCalls() []struct {
	Ctx  context.Context
	In   *PutRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *PutRequest
		Opts []grpc.CallOption
	}
	mock.lockPut.RLock()
	calls = mock.calls.Put
	mock.lockPut.RUnlock()
	return calls
}

// Ensure, that StorageServiceServerMock does implement StorageServiceServer.
// If this is not the case, regenerate this file with moq.
var _ StorageServiceServer = &StorageServiceServerMock{}

// StorageServiceServerMock is a mock implementation of StorageServiceServer.
//
// 	func TestSomethingThatUsesStorageServiceServer(t *testing.T) {
//
// 		// make and configure a mocked StorageServiceServer
// 		mockedStorageServiceServer := &StorageServiceServerMock{
// 			GetFunc: func(contextMoqParam context.Context, getRequest *GetRequest) (*GetResponse, error) {
// 				panic("mock out the Get method")
// 			},
// 			PutFunc: func(contextMoqParam context.Context, putRequest *PutRequest) (*PutResponse, error) {
// 				panic("mock out the Put method")
// 			},
// 			mustEmbedUnimplementedStorageServiceServerFunc: func()  {
// 				panic("mock out the mustEmbedUnimplementedStorageServiceServer method")
// 			},
// 		}
//
// 		// use mockedStorageServiceServer in code that requires StorageServiceServer
// 		// and then make assertions.
//
// 	}
type StorageServiceServerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(contextMoqParam context.Context, getRequest *GetRequest) (*GetResponse, error)

	// PutFunc mocks the Put method.
	PutFunc func(contextMoqParam context.Context, putRequest *PutRequest) (*PutResponse, error)

	// mustEmbedUnimplementedStorageServiceServerFunc mocks the mustEmbedUnimplementedStorageServiceServer method.
	mustEmbedUnimplementedStorageServiceServerFunc func()

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetRequest is the getRequest argument value.
			GetRequest *GetRequest
		}
		// Put holds details about calls to the Put method.
		Put []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// PutRequest is the putRequest argument value.
			PutRequest *PutRequest
		}
		// mustEmbedUnimplementedStorageServiceServer holds details about calls to the mustEmbedUnimplementedStorageServiceServer method.
		mustEmbedUnimplementedStorageServiceServer []struct {
		}
	}
	lockGet                                        sync.RWMutex
	lockPut                                        sync.RWMutex
	lockmustEmbedUnimplementedStorageServiceServer sync.RWMutex
}

// Get calls GetFunc.
func (mock *StorageServiceServerMock) Get(contextMoqParam context.Context, getRequest *GetRequest) (*GetResponse, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		GetRequest      *GetRequest
	}{
		ContextMoqParam: contextMoqParam,
		GetRequest:      getRequest,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	if mock.GetFunc == nil {
		var (
			getResponseOut *GetResponse
			errOut         error
		)
		return getResponseOut, errOut
	}
	return mock.GetFunc(contextMoqParam, getRequest)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedStorageServiceServer.GetCalls())
func (mock *StorageServiceServerMock) GetCalls() []struct {
	ContextMoqParam context.Context
	GetRequest      *GetRequest
} {
	var calls []struct {
		ContextMoqParam context.Context
		GetRequest      *GetRequest
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Put calls PutFunc.
func (mock *StorageServiceServerMock) Put(contextMoqParam context.Context, putRequest *PutRequest) (*PutResponse, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		PutRequest      *PutRequest
	}{
		ContextMoqParam: contextMoqParam,
		PutRequest:      putRequest,
	}
	mock.lockPut.Lock()
	mock.calls.Put = append(mock.calls.Put, callInfo)
	mock.lockPut.Unlock()
	if mock.PutFunc == nil {
		var (
			putResponseOut *PutResponse
			errOut         error
		)
		return putResponseOut, errOut
	}
	return mock.PutFunc(contextMoqParam, putRequest)
}

// PutCalls gets all the calls that were made to Put.
// Check the length with:
//     len(mockedStorageServiceServer.PutCalls())
func (mock *StorageServiceServerMock) PutCalls() []struct {
	ContextMoqParam context.Context
	PutRequest      *PutRequest
} {
	var calls []struct {
		ContextMoqParam context.Context
		PutRequest      *PutRequest
	}
	mock.lockPut.RLock()
	calls = mock.calls.Put
	mock.lockPut.RUnlock()
	return calls
}

// mustEmbedUnimplementedStorageServiceServer calls mustEmbedUnimplementedStorageServiceServerFunc.
func (mock *StorageServiceServerMock) mustEmbedUnimplementedStorageServiceServer() {
	callInfo := struct {
	}{}
	mock.lockmustEmbedUnimplementedStorageServiceServer.Lock()
	mock.calls.mustEmbedUnimplementedStorageServiceServer = append(mock.calls.mustEmbedUnimplementedStorageServiceServer, callInfo)
	mock.lockmustEmbedUnimplementedStorageServiceServer.Unlock()
	if mock.mustEmbedUnimplementedStorageServiceServerFunc == nil {
		return
	}
	mock.mustEmbedUnimplementedStorageServiceServerFunc()
}

// mustEmbedUnimplementedStorageServiceServerCalls gets all the calls that were made to mustEmbedUnimplementedStorageServiceServer.
// Check the length with:
//     len(mockedStorageServiceServer.mustEmbedUnimplementedStorageServiceServerCalls())
func (mock *StorageServiceServerMock) mustEmbedUnimplementedStorageServiceServerCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockmustEmbedUnimplementedStorageServiceServer.RLock()
	calls = mock.calls.mustEmbedUnimplementedStorageServiceServer
	mock.lockmustEmbedUnimplementedStorageServiceServer.RUnlock()
	return calls
}
