// Code generated by MockGen. DO NOT EDIT.
// Source: facilities.go

// Package cluster is a generated GoMock package.
package clust

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	membership "github.com/maxpoletaev/kv/membership"
)

// MockMemberRegistry is a mock of MemberRegistry interface.
type MockMemberRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockMemberRegistryMockRecorder
}

// MockMemberRegistryMockRecorder is the mock recorder for MockMemberRegistry.
type MockMemberRegistryMockRecorder struct {
	mock *MockMemberRegistry
}

// NewMockMemberRegistry creates a new mock instance.
func NewMockMemberRegistry(ctrl *gomock.Controller) *MockMemberRegistry {
	mock := &MockMemberRegistry{ctrl: ctrl}
	mock.recorder = &MockMemberRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemberRegistry) EXPECT() *MockMemberRegistryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockMemberRegistry) Add(members ...membership.Member) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Add", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockMemberRegistryMockRecorder) Add(members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockMemberRegistry)(nil).Add), members...)
}

// HasMember mocks base method.
func (m *MockMemberRegistry) HasMember(arg0 membership.NodeID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasMember", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasMember indicates an expected call of HasMember.
func (mr *MockMemberRegistryMockRecorder) HasMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasMember", reflect.TypeOf((*MockMemberRegistry)(nil).HasMember), arg0)
}

// Member mocks base method.
func (m *MockMemberRegistry) Member(arg0 membership.NodeID) (membership.Member, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Member", arg0)
	ret0, _ := ret[0].(membership.Member)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Member indicates an expected call of Member.
func (mr *MockMemberRegistryMockRecorder) Member(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Member", reflect.TypeOf((*MockMemberRegistry)(nil).Member), arg0)
}

// Members mocks base method.
func (m *MockMemberRegistry) Members() []membership.Member {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Members")
	ret0, _ := ret[0].([]membership.Member)
	return ret0
}

// Members indicates an expected call of Members.
func (mr *MockMemberRegistryMockRecorder) Members() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Members", reflect.TypeOf((*MockMemberRegistry)(nil).Members))
}

// MockDialer is a mock of Dialer interface.
type MockDialer struct {
	ctrl     *gomock.Controller
	recorder *MockDialerMockRecorder
}

// MockDialerMockRecorder is the mock recorder for MockDialer.
type MockDialerMockRecorder struct {
	mock *MockDialer
}

// NewMockDialer creates a new mock instance.
func NewMockDialer(ctrl *gomock.Controller) *MockDialer {
	mock := &MockDialer{ctrl: ctrl}
	mock.recorder = &MockDialerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDialer) EXPECT() *MockDialerMockRecorder {
	return m.recorder
}

// DialContext mocks base method.
func (m *MockDialer) DialContext(ctx context.Context, addr string) (Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DialContext", ctx, addr)
	ret0, _ := ret[0].(Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DialContext indicates an expected call of DialContext.
func (mr *MockDialerMockRecorder) DialContext(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialContext", reflect.TypeOf((*MockDialer)(nil).DialContext), ctx, addr)
}
