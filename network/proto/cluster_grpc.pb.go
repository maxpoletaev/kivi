// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: network/proto/cluster.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClusterSericeClient is the client API for ClusterSerice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClusterSericeClient interface {
	Info(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NodeList, error)
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
}

type clusterSericeClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterSericeClient(cc grpc.ClientConnInterface) ClusterSericeClient {
	return &clusterSericeClient{cc}
}

func (c *clusterSericeClient) Info(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NodeList, error) {
	out := new(NodeList)
	err := c.cc.Invoke(ctx, "/network.ClusterSerice/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterSericeClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, "/network.ClusterSerice/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterSericeServer is the server API for ClusterSerice service.
// All implementations must embed UnimplementedClusterSericeServer
// for forward compatibility
type ClusterSericeServer interface {
	Info(context.Context, *emptypb.Empty) (*NodeList, error)
	Join(context.Context, *JoinRequest) (*JoinResponse, error)
	mustEmbedUnimplementedClusterSericeServer()
}

// UnimplementedClusterSericeServer must be embedded to have forward compatible implementations.
type UnimplementedClusterSericeServer struct {
}

func (UnimplementedClusterSericeServer) Info(context.Context, *emptypb.Empty) (*NodeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedClusterSericeServer) Join(context.Context, *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedClusterSericeServer) mustEmbedUnimplementedClusterSericeServer() {}

// UnsafeClusterSericeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClusterSericeServer will
// result in compilation errors.
type UnsafeClusterSericeServer interface {
	mustEmbedUnimplementedClusterSericeServer()
}

func RegisterClusterSericeServer(s grpc.ServiceRegistrar, srv ClusterSericeServer) {
	s.RegisterService(&ClusterSerice_ServiceDesc, srv)
}

func _ClusterSerice_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterSericeServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.ClusterSerice/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterSericeServer).Info(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterSerice_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterSericeServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.ClusterSerice/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterSericeServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClusterSerice_ServiceDesc is the grpc.ServiceDesc for ClusterSerice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClusterSerice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "network.ClusterSerice",
	HandlerType: (*ClusterSericeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _ClusterSerice_Info_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _ClusterSerice_Join_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "network/proto/cluster.proto",
}
